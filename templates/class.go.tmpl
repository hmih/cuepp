#pragma once

{{ $IDNT := "    " -}}
{{ $TEMPLATE_DATA := . -}}
{{ $GLOBAL := index $TEMPLATE_DATA 0 -}}
{{ $NAME := index $TEMPLATE_DATA 1 -}}
{{ $INPUT := index $TEMPLATE_DATA 2 -}}

{{ if $GLOBAL.readValuesAtRuntime -}}
#include <nlohmann/json.hpp>
{{ end -}}
{{ range $I := $GLOBAL.defaultIncludes -}}
#include <{{ $I }}>
{{ end -}}

{{ range $I := $INPUT.includes -}}
#include <{{ $I.name }}>
{{ end -}}

{{ if $GLOBAL.readValuesAtRuntime }}
using json = nlohmann::json;
{{ end }}

namespace {{ $INPUT.namespace }} {
{{ if eq $INPUT.type "enum" -}}
{{ $INPUT.type }} {{ $NAME }} {
{{ range $F := $INPUT.fields -}}
    {{"    "}} {{ $F.name }} = {{ $F.literal.value }},
{{ end -}}
};
{{ else -}}
{{ $INPUT.type }} {{ $NAME }} {
{{ range $F := $INPUT.fields -}}
    {{"    "}} {{ $F.type }} {{ $F.name -}}
    {{ "{" -}}
    {{ if $F.literal -}}
        {{ if $F.literal.quote -}}
            {{ $F.literal.value | printf "%q" -}}
        {{ else -}}
            {{ $F.literal.value -}}
        {{ end -}}
    {{ end -}}
    {{ "}" }};
{{ end -}}
};
{{ end -}}
} // namespace {{ $INPUT.namespace }}

{{ if $GLOBAL.readValuesAtRuntime -}}
namespace ns {
    void to_json(json& j, const {{ $INPUT.type }} {{$INPUT.name}}& conf) {
        j = json{
{{ range $F := $INPUT.fields -}}
    {{ $IDNT }}{{ $IDNT }}{{ $IDNT }}{{ "{" }}{{$F.name | printf "%q"}}, conf.{{$F.name}}{{ "}" -}},
{{ end -}}
{{ $IDNT }}{{ $IDNT }}};
    }

    void from_json(const json& j, {{ $INPUT.type }} {{$INPUT.name}}& conf) {
{{ range $F := $INPUT.fields -}}
    {{ $IDNT }}{{ $IDNT }}j.at({{$F.name | printf "%q"}}).get_to(conf.{{$F.name}});
{{ end -}}
{{ $IDNT }}}
}
{{ end -}}
